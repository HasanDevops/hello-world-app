name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      REPOSITORY_NAME: hello-world-nodejs
      IMAGE_TAG: ${{ github.sha }}
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names $REPOSITORY_NAME || \
          aws ecr create-repository --repository-name $REPOSITORY_NAME

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build_docker
        run: |
          docker build -t $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG .
          docker images

      - name: Push Docker image to Amazon ECR
        id: push_docker
        run: docker push $ECR_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG

      - name: Save Docker image URI
        run: echo "::set-output name=docker_image_uri::${{ steps.build_docker.outputs.image }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Verify Terraform Directory
        run: |
          if [ ! -d "./terraform" ]; then
            echo "Terraform directory does not exist"
            exit 1
          fi

      - name: Initialize Terraform
        id: init_terraform
        working-directory: ./terraform
        run: terraform init -input=false

      - name: Validate Terraform
        id: validate_terraform
        working-directory: ./terraform
        run: terraform validate -input=false

      - name: Terraform Apply
        id: apply_terraform
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -input=false -auto-approve -parallelism=10

      - name: Save Terraform state
        run: echo "::save-state name=terraform_state::${{ steps.apply_terraform.outputs.state }}"
